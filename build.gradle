buildscript {
    repositories {
        mavenCentral()
        maven {
            name = "forge"
            url = "https://maven.minecraftforge.net/"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
        maven {
            url = "https://jitpack.io"
        }
    }
    dependencies {
        classpath 'com.github.GTNewHorizons:ForgeGradle:1.2.11'
    }
}

plugins {
    id 'scala'
    id 'idea'
    id 'maven-publish'
    id 'com.modrinth.minotaur' version '2.2.0'
}

apply plugin: 'forge'

version = "1.7.10-2.8.14"
group = "scp002.mod.dropoff"
archivesBaseName = "dropoff"

def getGitRef() {
    try {
        def stdout = new ByteArrayOutputStream()
        exec {
            commandLine 'git', 'rev-parse', '--short', 'HEAD'
            standardOutput = stdout
        }
        return stdout.toString().trim()
    } catch (Throwable e) {
        return "unknown"
    }
}

version += "+" + getGitRef()

ext.simpleVersion = version
version = "MC1.7.10-${project.version}"

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

minecraft {
    version = "1.7.10-10.13.4.1614-1.7.10"

    replace "@VERSION@", "${project.version}"
    replace "/*@MCVERSIONDEP@*/", ", acceptedMinecraftVersions = \"[1.7.10,1.7.10+)\""
}

runClient {
    jvmArgs '-Dfml.coreMods.load=li.cil.oc.common.launch.TransformerLoader'
}
runServer {
    jvmArgs '-Dfml.coreMods.load=li.cil.oc.common.launch.TransformerLoader'
}

repositories {
    maven {
        name 'Overmind forge repo mirror'
        url 'https://gregtech.overminddl1.com/'
    }
    ivy {
        name 'weird maven repos'
        artifactPattern "https://maven.cil.li/[module]/[revision]/[module]-[revision].[ext]"
        metadataSources {
            artifact()
        }
    }
    ivy {
        name 'weird maven repos 2'
        artifactPattern "https://maven.cil.li/[module]/[revision]/[module]-[revision]-[classifier].[ext]"
        metadataSources {
            artifact()
        }
    }
    ivy {
        name 'asie dependency mirror'
        artifactPattern "https://asie.pl/javadeps/[module]-[revision](-[classifier]).[ext]"
        metadataSources {
            artifact()
        }
    }
}

configurations {
    embedded
    implementation.extendsFrom embedded
}

dependencies {
    compile 'com.google.code.findbugs:jsr305:1.3.9' // Annotations used by google libs.

    // Add Storage Drawers JAR as a dependency
    compile files('libs/StorageDrawers-1.7.10-1.10.9.jar')


    testCompile "junit:junit:4.13"
    testCompile "org.mockito:mockito-all:1.10.19"
    testCompile "org.scalactic:scalactic_2.11:2.2.6"
    testCompile "org.scalatest:scalatest_2.11:2.2.6"
}

processResources {
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
        expand 'version': "${project.version}", 'mcversion': "1.7.10"
    }
    from(sourceSets.main.resources.srcDirs) {
        include 'application.conf'
        filter { line ->
            line.replaceAll("@VERSION@", "${project.version}")
        }
    }
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
        exclude 'application.conf'
    }

    rename '(.+_at.cfg)', 'META-INF/$1'
}

def commonManifest = {
    attributes FMLCorePlugin: "li.cil.oc.common.launch.TransformerLoader"
    attributes FMLCorePluginContainsFMLMod: "true"
    attributes FMLAT: "oc_at.cfg"
}

jar {
    exclude "cofh/**"
    exclude "mods/**"
    configurations.embedded.each { dep ->
        from(project.zipTree(dep)) {
            exclude 'META-INF', 'META-INF/**'
        }
    }
    classifier = 'universal'
    manifest commonManifest
}

javadoc {
    include 'li.cil.oc.api/**'
}

task deobfJar(type: Jar) {
    from sourceSets.main.output
    exclude "cofh/**"
    exclude "mods/**"
    configurations.embedded.each { dep ->
        from(project.zipTree(dep)) {
            exclude 'META-INF', 'META-INF/**'
        }
    }
    classifier = 'dev'
    manifest commonManifest
}

task apiJar(type: Jar) {
    from sourceSets.main.output
    from sourceSets.main.java
    classifier = 'api'
    include 'li.cil.oc.api/**'
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    from 'build/docs/javadoc'
    classifier 'javadoc'
}

task sourcesJar(type: Jar) {
    from sourceSets.main.java
    from sourceSets.main.scala
    classifier = 'sources'
}

artifacts {
    archives deobfJar
    archives apiJar
    archives javadocJar
    archives sourcesJar
}


idea {
    module {
        inheritOutputDirs = true
    }
}
